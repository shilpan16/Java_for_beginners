Hereâ€™s how you can implement the same basic linked list operations in Java with sample outputs:

Basic Linked List Operations
----------------------------
class Node {
    int data;
    Node next;

    // Constructor to initialize a node
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    private Node head;

    // Insert a new node at the end of the list
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }

    // Display the linked list elements
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("None");
    }

    // Insert a new node at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Delete a node with a specific value
    public boolean deleteNode(int value) {
        if (head == null) return false;

        if (head.data == value) {
            head = head.next;
            return true;
        }

        Node temp = head;
        Node prev = null;

        while (temp != null && temp.data != value) {
            prev = temp;
            temp = temp.next;
        }

        if (temp == null) return false;

        prev.next = temp.next;
        return true;
    }

    // Search for a node with a specific value
    public boolean search(int value) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == value) return true;
            temp = temp.next;
        }
        return false;
    }

    // Reverse the linked list
    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next;

        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }

    // Main method to test the linked list operations
    public static void main(String[] args) {
        LinkedList ll = new LinkedList();

        // Insert elements
        ll.insert(1);
        ll.insert(2);
        ll.insert(3);
        System.out.print("Initial List: ");
        ll.display();

        // Insert at the beginning
        ll.insertAtBeginning(0);
        System.out.print("After Inserting at Beginning: ");
        ll.display();

        // Delete a node
        ll.deleteNode(2);
        System.out.print("After Deleting Node with Value 2: ");
        ll.display();

        // Search for elements
        System.out.println("Search for 3: " + ll.search(3)); // true
        System.out.println("Search for 5: " + ll.search(5)); // false

        // Reverse the linked list
        ll.reverse();
        System.out.print("After Reversing the List: ");
        ll.display();
    }
}

Output:
Initial List: 1 -> 2 -> 3 -> None
After Inserting at Beginning: 0 -> 1 -> 2 -> 3 -> None
After Deleting Node with Value 2: 0 -> 1 -> 3 -> None
Search for 3: true
Search for 5: false
After Reversing the List: 3 -> 1 -> 0 -> None
